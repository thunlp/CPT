# Copyright (c) 2021 Microsoft Corporation. Licensed under the MIT license.
import cv2
import math
import json, pickle
from PIL import Image
from maskrcnn_benchmark.structures.bounding_box import BoxList
import os.path as op
import numpy as np

from maskrcnn_benchmark.structures.tsv_file import TSVFile
from .utils.load_files import load_linelist_file, load_from_yaml_file
from .utils.load_files import find_file_path_in_yaml
from .utils.image_ops import img_from_base64
import glob
import os
from PIL import Image, ImageDraw
import random


class ImgDataset(object):
    def __init__(self, data_dir, transforms=None, **kwargs):
        """Constructor.
        Args:
            img_file: Image file with image key and base64 encoded image str.
            label_file: An optional label file with image key and label information.
                A label_file is required for training and optional for testing.
            hw_file: An optional file with image key and image height/width info.
            linelist_file: An optional file with a list of line indexes to load samples.
                It is useful to select a subset of samples or duplicate samples.
        """
        self.img_files = glob.glob(os.path.join(data_dir, "*.jpg"))
        self.img_files = sorted(self.img_files)

        import pickle
        n_period = pickle.load(open("tmp/cnt.pk", "rb"))
        period = len(self.img_files) // 5
        if n_period == 4:
            self.img_files = self.img_files[period * n_period:]
        elif n_period < 4:
            self.img_files = self.img_files[period * n_period: period * (n_period + 1)]

        self.img_info = json.load(open(os.path.join(data_dir, "img_info.json")))
        self.transforms = transforms

    def __len__(self):
        return len(self.img_files)

    def get_img_info(self, idx):
        return self.img_info[os.path.basename(self.img_files[idx])]

    def __getitem__(self, idx):
        img = Image.open(self.img_files[idx]).convert("RGB")
        img_size = img.size # w, h
        target = None
        img, target = self.transforms(img, target)
        new_img_size = img.shape[1:]
        scale = math.sqrt(float(new_img_size[0]*new_img_size[1])/float(img_size[0]*img_size[1]))
        return img, target, idx, scale

    def get_img_key(self, idx):
        return os.path.basename(self.img_files[idx])


class ImgBoxDataset(object):
    def __init__(self, data_dir, transforms=None, **kwargs):
        """Constructor.
        Args:
            img_file: Image file with image key and base64 encoded image str.
            label_file: An optional label file with image key and label information.
                A label_file is required for training and optional for testing.
            hw_file: An optional file with image key and image height/width info.
            linelist_file: An optional file with a list of line indexes to load samples.
                It is useful to select a subset of samples or duplicate samples.
        """
        self.img_files = glob.glob(os.path.join(data_dir, "*.jpg"))
        self.img_files = sorted(self.img_files)
        self.img_info = json.load(open(os.path.join(data_dir, "img_info.json")))
        self.bboxes = pickle.load(open(os.path.join(data_dir, "bbox.pk"), "rb"))
        self.transforms = transforms
        self.colors = {'red': (250, 0, 45), 'purple': (140, 70, 165), 'green': (100, 250, 0),
                      'yellow': (250, 250, 45), 'blue': (0, 40, 250)}

    def __len__(self):
        return len(self.img_files)

    def get_img_info(self, idx):
        return self.img_info[os.path.basename(self.img_files[idx])]

    def __getitem__(self, idx):
        img = Image.open(self.img_files[idx]).convert("RGB")
        img_size = img.size # w, h
        target = BoxList(self.bboxes[os.path.basename(self.img_files[idx])], image_size=img_size, mode="xyxy")
        self.draw_boxes(img, target)
        img, target = self.transforms(img, target)
        new_img_size = img.shape[1:]
        scale = math.sqrt(float(new_img_size[0]*new_img_size[1])/float(img_size[0]*img_size[1]))
        return img, target, idx, scale

    def draw_boxes(self, img, target):
        draw = ImageDraw.Draw(img)
        for i, (cname, color) in enumerate(self.colors.items()):
            box = target.bbox[i]
            x1, y1, x2, y2 = float(box[0]), float(box[1]), float(box[2]), float(box[3])
            draw.rectangle(((x1, y1), (x2, y2)), outline=color, width=10)
        # img.save("/data_local/zhangao/codes/prompt_feat/tmp/test.jpg")

    def get_img_key(self, idx):
        return os.path.basename(self.img_files[idx])


class NormalFinetuneDataset(object):
    def __init__(self, yaml_file, transforms=None, **kwargs):
        self.cfg = load_from_yaml_file(yaml_file)
        self.root = self.cfg['ann_root']
        # load data split annotations file
        ann_file = find_file_path_in_yaml(self.cfg['ann'], self.root)
        self.anns = json.load(open(ann_file))  # anns = [{}]
        # self.anns = json.load(open("tmp/anns.json", "r"))[:1]
        # assert len(self.anns) < 50

        # load det file
        det_file = find_file_path_in_yaml(self.cfg['det'], self.root)
        self.det_dic = json.load(open(det_file))  # det_dic = {image_id: [box1, box2...]}

        # load image root
        self.image_root = self.cfg['image_root']

        self.transforms = transforms

    def __len__(self):
        return len(self.anns)

    def get_img_info(self, idx):
        data = self.anns[idx]
        return {'width': data['width'], 'height': data['height']}

    def get_img_id(self, name):
        name = name.replace(".jpg", "").split("_")[-1]
        return str(int(name))

    def __getitem__(self, idx):
        ann = self.anns[idx]
        caption = ann['caption']

        img_name = ann['file_name']
        img_path = os.path.join(self.image_root, img_name)

        imid = self.get_img_id(img_name)
        dets = self.det_dic[imid]
        dets = [d['box'] for d in dets]

        # get max iou bounding box
        gt_box = ann['bbox']
        iou_list = [self.computeIoU(box, gt_box) for box in dets]
        # assert max(iou_list) > 0.99, max(iou_list)
        # max_idx = np.argmax(iou_list)
        # dets[int(max_idx)] = gt_box
        # dets.append(ann['bbox'])
        # random.shuffle(dets)
        dets = np.asarray(dets)
        # convert from (x1, y1, w, h) to (x1, y1, x2, y2)
        dets[:, 2] = dets[:, 0] + dets[:, 2] - 1
        dets[:, 3] = dets[:, 1] + dets[:, 3] - 1
        # dets = dets.tolist()
        mask = (dets[:, 0] - dets[:, 2]) >= 0
        dets[:, 2][mask] += 1
        mask = (dets[:, 1] - dets[:, 3]) >= 0
        dets[:, 3][mask] += 1
        assert (dets[:, 0]<dets[:,2]).all() and (dets[:, 1]<dets[:,3]).all()

        img = Image.open(img_path).convert("RGB")
        img_size = img.size
        target = BoxList(dets, img_size, mode="xyxy")
        img, target = self.transforms(img, target)
        new_img_size = img.shape[1:]
        scale = math.sqrt(float(new_img_size[0] * new_img_size[1]) / float(img_size[0] * img_size[1]))
        return [img], [target], caption, [None], [None], idx, scale

    def get_img_key(self, idx):
        return self.anns[idx]['id']

    def computeIoU(self, box1, box2):
        # each box is of [x1, y1, w, h]
        inter_x1 = max(box1[0], box2[0])
        inter_y1 = max(box1[1], box2[1])
        inter_x2 = min(box1[0] + box1[2] - 1, box2[0] + box2[2] - 1)
        inter_y2 = min(box1[1] + box1[3] - 1, box2[1] + box2[3] - 1)

        if inter_x1 < inter_x2 and inter_y1 < inter_y2:
            inter = (inter_x2 - inter_x1 + 1) * (inter_y2 - inter_y1 + 1)
        else:
            inter = 0
        union = box1[2] * box1[3] + box2[2] * box2[3] - inter
        return float(inter) / union


class RefCoCoDataset(object):
    def __init__(self, yaml_file, transforms=None, **kwargs):
        """Constructor.
        Args:
            img_file: Image file with image key and base64 encoded image str.
            label_file: An optional label file with image key and label information.
                A label_file is required for training and optional for testing.
            hw_file: An optional file with image key and image height/width info.
            linelist_file: An optional file with a list of line indexes to load samples.
                It is useful to select a subset of samples or duplicate samples.
        """
        self.cfg = load_from_yaml_file(yaml_file)
        self.root = self.cfg['ann_root']
        # load data split annotations file
        ann_file = find_file_path_in_yaml(self.cfg['ann'], self.root)
        self.anns = json.load(open(ann_file)) # anns = [{}]
        # period = len(self.anns)//5
        # self.anns = self.anns[period*4:]

        # load det file
        det_file = find_file_path_in_yaml(self.cfg['det'], self.root)
        self.det_dic = json.load(open(det_file)) # det_dic = {image_id: [box1, box2...]}

        # load image root
        self.image_root = self.cfg['image_root']

        self.transforms = transforms
        self.anchor_color_name = 'red'
        self.anchor_color = (250, 0, 45)
        self.colors = [['purple', (140, 70, 165)], ['green', (100, 250, 0)],
                      ['yellow', (250, 250, 45)], ['blue', (0, 40, 250)]]
        # self.colors = [['green', (100, 250, 0)]]
        self.index = 0

    def __len__(self):
        return len(self.anns)

    def get_img_info(self, idx):
        data = self.anns[idx]
        return {'width': data['width'], 'height': data['height']}

    def get_img_id(self, name):
        name = name.replace(".jpg", "").split("_")[-1]
        return str(int(name))

    def __getitem__(self, idx):
        ann = self.anns[idx]
        caption = ann['caption']

        img_name = ann['file_name']
        img_path = os.path.join(self.image_root, img_name)

        imid = self.get_img_id(img_name)
        dets = self.det_dic[imid]
        dets = [d['box'] for d in dets]
        dets = np.asarray(dets)
        dets[:, 2] = dets[:, 0] + dets[:, 2] - 1
        dets[:, 3] = dets[:, 1] + dets[:, 3] - 1
        dets = dets.tolist()
        anchor_det = self.choose_anchor(dets)

        ret_imgs = []
        ret_targets = []
        ret_color_names = []
        ret_rects = []
        scale = 1.

        # only anchor image
        if len(dets) == 0:
            img = Image.open(img_path).convert("RGB")
            img_size = img.size
            target = BoxList([anchor_det], img_size, mode="xyxy")
            self.draw_rectangles(img, target, [self.anchor_color])
            img, target = self.transforms(img, target)
            new_img_size = img.shape[1:]
            scale = math.sqrt(float(new_img_size[0] * new_img_size[1]) / float(img_size[0] * img_size[1]))
            ret_imgs.append(img)
            ret_targets.append(target)
            ret_color_names.append([self.anchor_color_name])
            ret_rects.append([anchor_det])
            return ret_imgs, ret_targets, caption, ret_color_names, ret_rects, idx, scale

        # other images
        for i in range( math.ceil( len(dets)/len(self.colors) ) ):
            img = Image.open(img_path).convert("RGB")
            img_size = img.size
            # construct cur dets
            cur_dets = [anchor_det] + dets[i*len(self.colors): (i+1)*len(self.colors)]
            target = BoxList(cur_dets, img_size, mode="xyxy")

            # construct colors
            cur_colors = [[self.anchor_color_name, self.anchor_color]] + self.colors[:len(cur_dets)-1]
            cur_color_set = [x[1] for x in cur_colors]
            cur_color_names = [x[0] for x in cur_colors]
            ret_color_names.append(cur_color_names)

            assert len(cur_color_set) == len(cur_color_names)
            assert len(cur_color_names) == target.bbox.shape[0]
            assert len(cur_color_names) == len(cur_dets)

            # process img and targets
            # assert target.bbox.shape[0] == len(cur_color_set), "{}  {}   {}".format(anchor_det, target.bbox, cur_color_set)
            self.draw_rectangles(img, target, cur_color_set, imid=ann['id'])
            # add all dets to provide enough context
            target = BoxList([anchor_det]+dets, img_size, mode="xyxy")
            img, target = self.transforms(img, target)
            ret_imgs.append(img)
            ret_targets.append(target)
            ret_rects.append(cur_dets)

            new_img_size = img.shape[1:]
            scale = math.sqrt(float(new_img_size[0] * new_img_size[1]) / float(img_size[0] * img_size[1]))
        return ret_imgs, ret_targets, caption, ret_color_names, ret_rects, idx, scale

    def choose_anchor(self, dets):
        return dets.pop(0)

    # def draw_boxes(self, img, target, color_set, imid=None):
    #     draw = ImageDraw.Draw(img)
    #     for i, color in enumerate(color_set):
    #         box = target.bbox[i]
    #         x1, y1, x2, y2 = float(box[0]), float(box[1]), float(box[2]), float(box[3])
    #         draw.rectangle(((x1, y1), (x2, y2)), outline=color, width=2)
    #     self.index += 1
    #     path = "/data_local/zhangao/codes/prompt_feat/tmp/imgs"
    #     path = os.path.join(path, str(imid))
    #     if not os.path.exists(path):
    #         os.mkdir(path)
    #     path = os.path.join(path, str(self.index)+".jpg")
    #     img.save(path)
        # self.index += 1

    def draw_rectangles(self, img, target, color_set, imid=None):
        for i, color in enumerate(color_set):
            box = target.bbox[i]
            x1, y1, x2, y2 = int(box[0]), int(box[1]), int(box[2]), int(box[3])
            foreground = Image.new('RGBA', (x2-x1, y2-y1), color=color+(230, ))
            # draw = ImageDraw.Draw(foreground)
            # draw.rectangle([(0, 0), (x2-x1, y2-y1)], fill=color+(60,))
            img.paste(foreground, (x1, y1), foreground)
        self.index += 1
        path = "/data_local/zhangao/codes/prompt_feat/tmp/imgs"
        path = os.path.join(path, str(imid))
        if not os.path.exists(path):
            os.mkdir(path)
        path = os.path.join(path, str(self.index) + ".jpg")
        # img.save(path)

    def get_img_key(self, idx):
        return self.anns[idx]['id']
        # return self.get_img_id(self.anns[idx]['file_name'])


class RefCoCoWoAnchorDataset(object):
    def __init__(self, yaml_file, transforms=None, **kwargs):
        """Constructor.
        Args:
            img_file: Image file with image key and base64 encoded image str.
            label_file: An optional label file with image key and label information.
                A label_file is required for training and optional for testing.
            hw_file: An optional file with image key and image height/width info.
            linelist_file: An optional file with a list of line indexes to load samples.
                It is useful to select a subset of samples or duplicate samples.
        """
        self.cfg = load_from_yaml_file(yaml_file)
        self.root = self.cfg['ann_root']
        # load data split annotations file
        ann_file = find_file_path_in_yaml(self.cfg['ann'], self.root)
        self.anns = json.load(open(ann_file)) # anns = [{}]

        # import pickle
        n_period = pickle.load(open("tmp/cnt.pk", "rb"))
        period = len(self.anns)//20
        if n_period ==19:
            self.anns = self.anns[period * n_period: ]
        elif n_period<19:
            self.anns = self.anns[ period*n_period : period*(n_period+1) ]

        # self.rgbd = pickle.load(open("tmp/rgbd.pk", "rb"))
        # n_period = pickle.load(open("tmp/cnt.pk", "rb"))
        # period = len(self.anns) // 200
        # if n_period < 50:
        #     self.anns = self.anns[period * n_period:period*(n_period+1)]

        # few shot
        # import random
        # random.seed(0)
        # random.shuffle(self.anns)
        # self.anns = self.anns[:16]
        # json.dump(self.anns, open("tmp/anns.json", "w"))

        # load det file
        det_file = find_file_path_in_yaml(self.cfg['det'], self.root)
        self.det_dic = json.load(open(det_file)) # det_dic = {image_id: [box1, box2...]}

        # load image root
        self.image_root = self.cfg['image_root']

        self.transforms = transforms
        self.anchor_color_name = 'pink'
        # self.colors = [['red', (250, 0, 45)], ['purple', (140, 70, 165)], ['green', (100, 250, 0)],
        #               ['yellow', (250, 250, 45)], ['blue', (0, 40, 250)]]
        # self.colors = [['red', (255, 0, 30)]]
        # {'pink': ['255_205_225.jpg', 0.9017444252967834], 'red': ['100_0_15.jpg', 0.8864567279815674],
        #  'yellow': ['250_250_50.jpg', 0.8805188536643982], 'purple': ['85_45_130.jpg', 0.8738551139831543],
        #  'blue': ['40_120_255.jpg', 0.7084723711013794], 'green': ['5_70_35.jpg', 0.6079568266868591],
        #  'black': ['20_25_25.jpg', 0.5086604356765747]}
        self.colors = [['pink', (255, 205, 225, 160)]]
        self.index = 0

    def __len__(self):
        return len(self.anns)

    def get_img_info(self, idx):
        data = self.anns[idx]
        return {'width': data['width'], 'height': data['height']}

    def get_img_id(self, name):
        name = name.replace(".jpg", "").split("_")[-1]
        return str(int(name))

    def __getitem__(self, idx):
        ann = self.anns[idx]
        caption = ann['caption']

        img_name = ann['file_name']
        img_path = os.path.join(self.image_root, img_name)

        imid = self.get_img_id(img_name)
        dets = self.det_dic[imid]
        dets = [d['box'] for d in dets]
        dets = np.asarray(dets)
        dets[:, 2] = dets[:, 0] + dets[:, 2] - 1
        dets[:, 3] = dets[:, 1] + dets[:, 3] - 1
        dets = dets.tolist()

        ret_imgs = []
        ret_targets = []
        ret_color_names = []
        ret_rects = []
        scale = 1.

        # other images
        for i in range( math.ceil( len(dets)/len(self.colors) ) ):
            img = Image.open(img_path).convert("RGB")
            img_size = img.size
            # construct cur dets
            cur_dets = dets[i*len(self.colors): (i+1)*len(self.colors)]
            target = BoxList(cur_dets, img_size, mode="xyxy")

            # construct colors
            cur_colors = self.colors[:len(cur_dets)]
            cur_color_set = [x[1] for x in cur_colors]
            cur_color_names = [x[0] for x in cur_colors]
            ret_color_names.append(cur_color_names)

            assert len(cur_color_set) == len(cur_color_names)
            assert len(cur_color_names) == target.bbox.shape[0]
            assert len(cur_color_names) == len(cur_dets)

            # process img and targets
            # assert target.bbox.shape[0] == len(cur_color_set), "{}  {}   {}".format(anchor_det, target.bbox, cur_color_set)
            self.draw_rectangles(img, target, cur_color_set, imid=ann['id'])
            # add all dets to provide enough context
            target = BoxList(dets, img_size, mode="xyxy")
            img, target = self.transforms(img, target)
            ret_imgs.append(img)
            ret_targets.append(target)
            ret_rects.append(cur_dets)

            new_img_size = img.shape[1:]
            scale = math.sqrt(float(new_img_size[0] * new_img_size[1]) / float(img_size[0] * img_size[1]))
        return ret_imgs, ret_targets, caption, ret_color_names, ret_rects, idx, scale

    def choose_anchor(self, dets):
        return dets.pop(0)

    def draw_rectangles(self, img, target, color_set, imid=None):
        for i, color in enumerate(color_set):
            box = target.bbox[i]
            x1, y1, x2, y2 = int(box[0]), int(box[1]), int(box[2]), int(box[3])
            foreground = Image.new('RGBA', (x2-x1, y2-y1), color=color)
            img.paste(foreground, (x1, y1), foreground)
        # self.index += 1
        # path = "/data_local/zhangao/codes/prompt_feat/tmp/imgs"
        # path = os.path.join(path, str(imid))
        # if not os.path.exists(path):
        #     os.mkdir(path)
        # path = os.path.join(path, str(self.index) + ".jpg")
        # img.save(path)

    def get_img_key(self, idx):
        return self.anns[idx]['id']
        # return self.get_img_id(self.anns[idx]['file_name'])

class ExpColorDataset(object):
    def __init__(self, yaml_file, transforms=None, **kwargs):
        self.cfg = load_from_yaml_file(yaml_file)
        self.root = self.cfg['ann_root']
        # load data split annotations file
        ann_file = find_file_path_in_yaml(self.cfg['ann'], self.root)
        self.anns = json.load(open(ann_file))  # anns = [{}]
        self.anns = [ann for ann in self.anns if self._is_valid(ann['caption'])]

        # load det file
        det_file = find_file_path_in_yaml(self.cfg['det'], self.root)
        self.det_dic = json.load(open(det_file))  # det_dic = {image_id: [box1, box2...]}

        # load image root
        self.image_root = self.cfg['image_root']

        self.transforms = transforms
        self.anchor_color_name = 'red'
        self.anchor_color = (250, 0, 45)
        self.colors = [['purple', (140, 70, 165)], ['green', (100, 250, 0)],
                       ['yellow', (250, 250, 45)], ['blue', (0, 40, 250)]]
        self.index = 0

    def _is_valid(self, caption):
        caption = caption.split()
        for wrd in caption:
            if wrd in ["red", "purple", "green", "yellow", "blue"]:
                return True
        return False

    def __len__(self):
        return len(self.anns)

    def get_img_info(self, idx):
        data = self.anns[idx]
        return {'width': data['width'], 'height': data['height']}

    def get_img_id(self, name):
        name = name.replace(".jpg", "").split("_")[-1]
        return str(int(name))

    def __getitem__(self, idx):
        ann = self.anns[idx]
        caption = ann['caption']
        color2mask = lambda wrd: '[MASK]' if wrd in ["red", "purple", "green", "yellow", "blue"] else wrd
        new_caption = []
        color_names = []
        for wrd in caption.split():
            nwrd = color2mask(wrd)
            new_caption.append(nwrd)
            if wrd != nwrd:
                color_names.append(wrd)
        caption = " ".join(new_caption)

        img_name = ann['file_name']
        img_path = os.path.join(self.image_root, img_name)

        imid = self.get_img_id(img_name)
        dets = self.det_dic[imid]
        dets = [d['box'] for d in dets]
        dets = np.asarray(dets)
        dets[:, 2] = dets[:, 0] + dets[:, 2] - 1
        dets[:, 3] = dets[:, 1] + dets[:, 3] - 1
        dets = dets.tolist()

        ret_imgs = []
        ret_targets = []
        ret_color_names = []

        # only anchor image
        img = Image.open(img_path).convert("RGB")
        img_size = img.size
        # dets = [[0., 0., img.size[0], img.size[1]]] + dets
        target = BoxList(dets, img_size, mode="xyxy")
        img, target = self.transforms(img, target)
        new_img_size = img.shape[1:]
        scale = math.sqrt(float(new_img_size[0] * new_img_size[1]) / float(img_size[0] * img_size[1]))
        ret_imgs.append(img)
        ret_targets.append(target)
        ret_color_names.append(color_names)
        return ret_imgs, ret_targets, caption, ret_color_names, idx, scale

    def choose_anchor(self, dets):
        return dets.pop(0)

    def draw_boxes(self, img, target, color_set, imid=None):
        draw = ImageDraw.Draw(img)
        for i, color in enumerate(color_set):
            box = target.bbox[i]
            x1, y1, x2, y2 = float(box[0]), float(box[1]), float(box[2]), float(box[3])
            draw.rectangle(((x1, y1), (x2, y2)), outline=color, width=2)

    def get_img_key(self, idx):
        return self.anns[idx]['id']
        # return self.get_img_id(self.anns[idx]['file_name'])


class ExpTemplateDataset(object):
    def __init__(self, yaml_file, transforms=None, **kwargs):
        self.cfg = load_from_yaml_file(yaml_file)
        self.root = self.cfg['ann_root']
        # load data split annotations file
        ann_file = find_file_path_in_yaml(self.cfg['ann'], self.root)
        self.anns = json.load(open(ann_file))  # anns = [{}]

        # load det file
        det_file = find_file_path_in_yaml(self.cfg['det'], self.root)
        self.det_dic = json.load(open(det_file))  # det_dic = {image_id: [box1, box2...]}

        # load image root
        self.image_root = self.cfg['image_root']

        self.transforms = transforms
        self.colors = [['red', (250, 0, 45)],
                       ['purple', (140, 70, 165)], ['green', (100, 250, 0)],
                       ['yellow', (250, 250, 45)], ['blue', (0, 40, 250)]]
        self.index = 0

    def __len__(self):
        return len(self.anns)

    def get_img_info(self, idx):
        data = self.anns[idx]
        return {'width': data['width'], 'height': data['height']}

    def get_img_id(self, name):
        name = name.replace(".jpg", "").split("_")[-1]
        return str(int(name))

    def __getitem__(self, idx):
        ann = self.anns[idx]
        caption = ann['caption']

        img_name = ann['file_name']
        img_path = os.path.join(self.image_root, img_name)

        imid = self.get_img_id(img_name)
        dets = [ann['bbox']]
        dets = np.asarray(dets)
        dets[:, 2] = dets[:, 0] + dets[:, 2] - 1
        dets[:, 3] = dets[:, 1] + dets[:, 3] - 1
        dets = dets.tolist()

        ret_imgs = []
        ret_targets = []
        ret_color_names = []

        scale = 1
        # other images
        for i in range(len(self.colors)):
            cur_color = self.colors[i]
            img = Image.open(img_path).convert("RGB")
            img_size = img.size
            # construct cur dets
            target = BoxList(dets, img_size, mode="xyxy")

            # construct colors
            ret_color_names.append([cur_color[0]])

            # process img and targets
            self.draw_boxes(img, target, [cur_color[1]], imid=ann['id'])
            img, target = self.transforms(img, target)
            ret_imgs.append(img)
            ret_targets.append(target)

            new_img_size = img.shape[1:]
            scale = math.sqrt(float(new_img_size[0] * new_img_size[1]) / float(img_size[0] * img_size[1]))
        return ret_imgs, ret_targets, caption, ret_color_names, idx, scale

    def choose_anchor(self, dets):
        return dets.pop(0)

    def draw_boxes(self, img, target, color_set, imid=None):
        draw = ImageDraw.Draw(img)
        for i, color in enumerate(color_set):
            box = target.bbox[i]
            x1, y1, x2, y2 = float(box[0]), float(box[1]), float(box[2]), float(box[3])
            draw.rectangle(((x1, y1), (x2, y2)), outline=color, width=2)

    def get_img_key(self, idx):
        return self.anns[idx]['id']


class ExpSoftTempDataset(object):
    def __init__(self, yaml_file, transforms=None, **kwargs):
        self.cfg = load_from_yaml_file(yaml_file)
        self.root = self.cfg['ann_root']
        # load data split annotations file
        ann_file = find_file_path_in_yaml(self.cfg['ann'], self.root)
        self.anns = json.load(open(ann_file))  # anns = [{}]

        # load det file
        det_file = find_file_path_in_yaml(self.cfg['det'], self.root)
        self.det_dic = json.load(open(det_file))  # det_dic = {image_id: [box1, box2...]}

        # load image root
        self.image_root = self.cfg['image_root']

        self.transforms = transforms
        self.colors = [['red', (250, 0, 45)],
                       ['purple', (140, 70, 165)], ['green', (100, 250, 0)],
                       ['yellow', (250, 250, 45)], ['blue', (0, 40, 250)]]
        self.index = 0

    def __len__(self):
        return len(self.anns)

    def get_img_info(self, idx):
        data = self.anns[idx]
        return {'width': data['width'], 'height': data['height']}

    def get_img_id(self, name):
        name = name.replace(".jpg", "").split("_")[-1]
        return str(int(name))

    def __getitem__(self, idx):
        ann = self.anns[idx]
        caption = ann['caption']

        img_name = ann['file_name']
        img_path = os.path.join(self.image_root, img_name)

        imid = self.get_img_id(img_name)
        dets = [ann['bbox']] + [d['box'] for d in self.det_dic[imid]]

        dets = np.asarray(dets)
        dets[:, 2] = dets[:, 0] + dets[:, 2] - 1
        dets[:, 3] = dets[:, 1] + dets[:, 3] - 1
        dets = dets.tolist()

        ret_imgs = []
        ret_targets = []
        ret_color_names = []

        scale = 1
        # other images
        for i in range(len(self.colors)):
            cur_color = self.colors[i]
            img = Image.open(img_path).convert("RGB")
            img_size = img.size
            # construct cur dets
            target = BoxList(dets, img_size, mode="xyxy")
            # construct colors
            ret_color_names.append([cur_color[0]])

            # process img and targets
            other_colors = [c[1] for c in self.colors if c is not cur_color]
            self.draw_rectangles(img, target, [cur_color[1]]+other_colors, imid=ann['id'])
            img, target = self.transforms(img, target)
            ret_imgs.append(img)
            ret_targets.append(target)

            new_img_size = img.shape[1:]
            scale = math.sqrt(float(new_img_size[0] * new_img_size[1]) / float(img_size[0] * img_size[1]))
        return ret_imgs, ret_targets, caption, ret_color_names, idx, scale

    def draw_rectangles(self, img, target, color_set, imid=None):
        for i, color in enumerate(color_set):
            if i >= len(target.bbox):
                break
            box = target.bbox[i]
            x1, y1, x2, y2 = int(box[0]), int(box[1]), int(box[2]), int(box[3])
            foreground = Image.new('RGBA', (x2-x1, y2-y1), color=color+(230, ))
            # draw = ImageDraw.Draw(foreground)
            # draw.rectangle([(0, 0), (x2-x1, y2-y1)], fill=color+(60,))
            img.paste(foreground, (x1, y1), foreground)
        self.index += 1
        path = "/data_local/zhangao/codes/prompt_feat/tmp/imgs"
        path = os.path.join(path, str(imid))
        if not os.path.exists(path):
            os.mkdir(path)
        path = os.path.join(path, str(self.index) + ".jpg")
        # img.save(path)

    def choose_anchor(self, dets):
        return dets.pop(0)

    def get_img_key(self, idx):
        return self.anns[idx]['id']


class ColorFinetuneDataset(object):
    def __init__(self, yaml_file, transforms=None, **kwargs):
        self.cfg = load_from_yaml_file(yaml_file)
        self.root = self.cfg['ann_root']
        # load data split annotations file
        ann_file = find_file_path_in_yaml(self.cfg['ann'], self.root)
        self.anns = json.load(open(ann_file))  # anns = [{}]
        # self.anns = self.anns[: len(self.anns)]

        # load det file
        det_file = find_file_path_in_yaml(self.cfg['det'], self.root)
        self.det_dic = json.load(open(det_file))  # det_dic = {image_id: [box1, box2...]}

        # load image root
        self.image_root = self.cfg['image_root']

        self.transforms = transforms
        self.colors = [['red', (250, 0, 45)],
                       ['purple', (140, 70, 165)], ['green', (100, 250, 0)],
                       ['yellow', (250, 250, 45)], ['blue', (0, 40, 250)]]
        self.index = 0

    def __len__(self):
        return len(self.anns)

    def get_img_info(self, idx):
        data = self.anns[idx]
        return {'width': data['width'], 'height': data['height']}

    def get_img_id(self, name):
        name = name.replace(".jpg", "").split("_")[-1]
        return str(int(name))

    def __getitem__(self, idx):
        ann = self.anns[idx]
        caption = ann['caption']

        img_name = ann['file_name']
        img_path = os.path.join(self.image_root, img_name)

        imid = self.get_img_id(img_name)
        dets = [ann['bbox']] + [d['box'] for d in self.det_dic[imid]]

        dets = np.asarray(dets)
        dets[:, 2] = dets[:, 0] + dets[:, 2] - 1
        dets[:, 3] = dets[:, 1] + dets[:, 3] - 1
        dets = dets.tolist()

        ret_imgs = []
        ret_targets = []
        ret_color_names = []

        scale = 1
        # other images
        for i in range(len(self.colors)):
            cur_color = self.colors[i]
            img = Image.open(img_path).convert("RGB")
            img_size = img.size
            # construct cur dets
            target = BoxList(dets, img_size, mode="xyxy")
            # construct colors
            ret_color_names.append([cur_color[0]])

            # process img and targets
            other_colors = [c[1] for c in self.colors if c is not cur_color]
            self.draw_rectangles(img, target, [cur_color[1]]+other_colors, imid=ann['id'])
            img, target = self.transforms(img, target)
            ret_imgs.append(img)
            ret_targets.append(target)

            new_img_size = img.shape[1:]
            scale = math.sqrt(float(new_img_size[0] * new_img_size[1]) / float(img_size[0] * img_size[1]))
        return ret_imgs, ret_targets, caption, ret_color_names, idx, scale

    def draw_rectangles(self, img, target, color_set, imid=None):
        for i, color in enumerate(color_set):
            if i >= len(target.bbox):
                break
            box = target.bbox[i]
            x1, y1, x2, y2 = int(box[0]), int(box[1]), int(box[2]), int(box[3])
            foreground = Image.new('RGBA', (x2-x1, y2-y1), color=color+(230, ))
            # draw = ImageDraw.Draw(foreground)
            # draw.rectangle([(0, 0), (x2-x1, y2-y1)], fill=color+(60,))
            img.paste(foreground, (x1, y1), foreground)
        self.index += 1
        path = "/data_local/zhangao/codes/prompt_feat/tmp/imgs"
        path = os.path.join(path, str(imid))
        if not os.path.exists(path):
            os.mkdir(path)
        path = os.path.join(path, str(self.index) + ".jpg")
        # img.save(path)

    def choose_anchor(self, dets):
        return dets.pop(0)

    def get_img_key(self, idx):
        return self.anns[idx]['id']